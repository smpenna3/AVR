
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000122  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000798  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000de1  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001711  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001728  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000bf  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000014  00000000  00000000  00001807  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000058  00000000  00000000  0000181b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	1b d0       	rcall	.+54     	; 0x66 <main>
  30:	76 c0       	rjmp	.+236    	; 0x11e <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <initIO>:
#define white PA0


void initIO(void) {
    //Set fast PWM for timer 0
    TCCR0A |= ((1 << WGM01) | (1 << WGM00));
  34:	80 b7       	in	r24, 0x30	; 48
  36:	83 60       	ori	r24, 0x03	; 3
  38:	80 bf       	out	0x30, r24	; 48
    TCCR1A |= ((1 << WGM01) | (1 << WGM00));
  3a:	8f b5       	in	r24, 0x2f	; 47
  3c:	83 60       	ori	r24, 0x03	; 3
  3e:	8f bd       	out	0x2f, r24	; 47
    
    // clear OC0A on compare match, set on BOTTOM (inverting)
    // 255 is fully off, 0 is fully on
    TCCR0A |= ((1 << COM0A1) | (1 << COM0A0));
  40:	80 b7       	in	r24, 0x30	; 48
  42:	80 6c       	ori	r24, 0xC0	; 192
  44:	80 bf       	out	0x30, r24	; 48
    TCCR1A |= ((1 << COM0A1) | (1 << COM0A0));
  46:	8f b5       	in	r24, 0x2f	; 47
  48:	80 6c       	ori	r24, 0xC0	; 192
  4a:	8f bd       	out	0x2f, r24	; 47
    
    //Use clock directly, no prescaler
    TCCR0B |= ((0 << CS02) | (0 << CS01) | (1 << CS00));
  4c:	83 b7       	in	r24, 0x33	; 51
  4e:	81 60       	ori	r24, 0x01	; 1
  50:	83 bf       	out	0x33, r24	; 51
    TCCR1B |= ((0 << CS02) | (0 << CS01) | (1 << CS00));
  52:	8e b5       	in	r24, 0x2e	; 46
  54:	81 60       	ori	r24, 0x01	; 1
  56:	8e bd       	out	0x2e, r24	; 46
    
    //Initialize counter for timer 0
    TCNT0 = 0;
  58:	12 be       	out	0x32, r1	; 50
    TCNT1 = 0;
  5a:	1d bc       	out	0x2d, r1	; 45
  5c:	1c bc       	out	0x2c, r1	; 44
    
    //Set LED pins as output
    DDRA |= ((1 << green) | (1 << blue) | (1 << red) | (1 << white));
  5e:	8a b3       	in	r24, 0x1a	; 26
  60:	81 6e       	ori	r24, 0xE1	; 225
  62:	8a bb       	out	0x1a, r24	; 26
  64:	08 95       	ret

00000066 <main>:
}

int main(void) {
	initIO();
  66:	e6 df       	rcall	.-52     	; 0x34 <initIO>

	while (1) {
        // fade green up
        for (int i = 0; i < 256; i++)
  68:	80 e0       	ldi	r24, 0x00	; 0
  6a:	90 e0       	ldi	r25, 0x00	; 0
        {
            OCR1B = (255-i);
            _delay_ms(2);
        }
        // fade green down
        for (int j = 255; j >= 0; j--)
  6c:	2f ef       	ldi	r18, 0xFF	; 255
  6e:	30 e0       	ldi	r19, 0x00	; 0
int main(void) {
	initIO();

	while (1) {
        // fade green up
        for (int i = 0; i < 256; i++)
  70:	8f 3f       	cpi	r24, 0xFF	; 255
  72:	91 05       	cpc	r25, r1
  74:	09 f0       	breq	.+2      	; 0x78 <main+0x12>
  76:	6c f4       	brge	.+26     	; 0x92 <main+0x2c>
        {
            OCR1B = (255-i);
  78:	a9 01       	movw	r20, r18
  7a:	48 1b       	sub	r20, r24
  7c:	59 0b       	sbc	r21, r25
  7e:	59 bd       	out	0x29, r21	; 41
  80:	48 bd       	out	0x28, r20	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	e7 ee       	ldi	r30, 0xE7	; 231
  84:	f3 e0       	ldi	r31, 0x03	; 3
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <main+0x20>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x26>
  8c:	00 00       	nop
int main(void) {
	initIO();

	while (1) {
        // fade green up
        for (int i = 0; i < 256; i++)
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	ef cf       	rjmp	.-34     	; 0x70 <main+0xa>
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
            _delay_ms(2);
        }
        // fade green down
        for (int j = 255; j >= 0; j--)
        {
            OCR1B = (255-j);
  96:	99 bd       	out	0x29, r25	; 41
  98:	88 bd       	out	0x28, r24	; 40
  9a:	e7 ee       	ldi	r30, 0xE7	; 231
  9c:	f3 e0       	ldi	r31, 0x03	; 3
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x38>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x3e>
  a4:	00 00       	nop
  a6:	01 96       	adiw	r24, 0x01	; 1
        {
            OCR1B = (255-i);
            _delay_ms(2);
        }
        // fade green down
        for (int j = 255; j >= 0; j--)
  a8:	81 15       	cp	r24, r1
  aa:	f1 e0       	ldi	r31, 0x01	; 1
  ac:	9f 07       	cpc	r25, r31
  ae:	99 f7       	brne	.-26     	; 0x96 <main+0x30>
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	90 e0       	ldi	r25, 0x00	; 0
        
        
        //fade blue up
        for (int i = 0; i < 256; i++)
        {
            OCR1A = (255-i);
  b4:	9b bd       	out	0x2b, r25	; 43
  b6:	8a bd       	out	0x2a, r24	; 42
  b8:	e7 ee       	ldi	r30, 0xE7	; 231
  ba:	f3 e0       	ldi	r31, 0x03	; 3
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x56>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x5c>
  c2:	00 00       	nop
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	b0 f7       	brcc	.-20     	; 0xb4 <main+0x4e>
            _delay_ms(2);
        }
        
        
        //fade blue up
        for (int i = 0; i < 256; i++)
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
            _delay_ms(2);
        }
        // fade blue down
        for (int j = 255; j >= 0; j--)
        {
            OCR1A = (255-j);
  cc:	9b bd       	out	0x2b, r25	; 43
  ce:	8a bd       	out	0x2a, r24	; 42
  d0:	e7 ee       	ldi	r30, 0xE7	; 231
  d2:	f3 e0       	ldi	r31, 0x03	; 3
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x6e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x74>
  da:	00 00       	nop
  dc:	01 96       	adiw	r24, 0x01	; 1
        {
            OCR1A = (255-i);
            _delay_ms(2);
        }
        // fade blue down
        for (int j = 255; j >= 0; j--)
  de:	81 15       	cp	r24, r1
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	9f 07       	cpc	r25, r31
  e4:	99 f7       	brne	.-26     	; 0xcc <main+0x66>
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	90 e0       	ldi	r25, 0x00	; 0
        }
        
        //fade red up
        for (int i = 0; i < 256; i++)
        {
            OCR0B = (255-i);
  ea:	8c bf       	out	0x3c, r24	; 60
  ec:	e7 ee       	ldi	r30, 0xE7	; 231
  ee:	f3 e0       	ldi	r31, 0x03	; 3
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x8a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x90>
  f6:	00 00       	nop
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	b8 f7       	brcc	.-18     	; 0xea <main+0x84>
            OCR1A = (255-j);
            _delay_ms(2);
        }
        
        //fade red up
        for (int i = 0; i < 256; i++)
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
            _delay_ms(2);
        }
        // fade red down
        for (int j = 255; j >= 0; j--)
        {
            OCR0B = (255-j);
 100:	8c bf       	out	0x3c, r24	; 60
 102:	e7 ee       	ldi	r30, 0xE7	; 231
 104:	f3 e0       	ldi	r31, 0x03	; 3
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0xa0>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0xa6>
 10c:	00 00       	nop
 10e:	01 96       	adiw	r24, 0x01	; 1
        {
            OCR0B = (255-i);
            _delay_ms(2);
        }
        // fade red down
        for (int j = 255; j >= 0; j--)
 110:	81 15       	cp	r24, r1
 112:	f1 e0       	ldi	r31, 0x01	; 1
 114:	9f 07       	cpc	r25, r31
 116:	a1 f7       	brne	.-24     	; 0x100 <main+0x9a>
int main(void) {
	initIO();

	while (1) {
        // fade green up
        for (int i = 0; i < 256; i++)
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	a9 cf       	rjmp	.-174    	; 0x70 <main+0xa>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
