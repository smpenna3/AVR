
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000018c  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000007d4  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e14  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001800  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000be  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000014  00000000  00000000  000018de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000058  00000000  00000000  000018f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_4>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  78:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <green>:

#define button PC5
#define button_interrupt PCINT13

void green(int intensity){
    OCR0A = (255-intensity);
  80:	80 95       	com	r24
  82:	87 bd       	out	0x27, r24	; 39
  84:	08 95       	ret

00000086 <blue>:
}

void blue(int intensity){
    OCR0B = (255-intensity);
  86:	80 95       	com	r24
  88:	88 bd       	out	0x28, r24	; 40
  8a:	08 95       	ret

0000008c <red>:
}

void red(int intensity){
    OCR2B = (255-intensity);
  8c:	80 95       	com	r24
  8e:	80 93 b4 00 	sts	0x00B4, r24
  92:	08 95       	ret

00000094 <initIO>:
}

void initIO(void) {
    //Define PC3 as input with pullup-resistor
    DDRC &= ~(1 << button);
  94:	3d 98       	cbi	0x07, 5	; 7
    PORTC |= (1 << button);
  96:	45 9a       	sbi	0x08, 5	; 8
    
    //Enable interrupt for PCINT_11
    PCICR |= _BV(PCIE1);
  98:	e8 e6       	ldi	r30, 0x68	; 104
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	80 83       	st	Z, r24
    PCMSK1 |= (_BV(button_interrupt));
  a2:	ec e6       	ldi	r30, 0x6C	; 108
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	80 83       	st	Z, r24
    
    // Fast PWM mode for timers 0 and 2
    TCCR0A |= (1 << WGM01) | (1 << WGM00);
  ac:	84 b5       	in	r24, 0x24	; 36
  ae:	83 60       	ori	r24, 0x03	; 3
  b0:	84 bd       	out	0x24, r24	; 36
    TCCR2A |= (1 << WGM21) | (1 << WGM20);
  b2:	e0 eb       	ldi	r30, 0xB0	; 176
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	83 60       	ori	r24, 0x03	; 3
  ba:	80 83       	st	Z, r24
    
    // clear OC0A on compare match, set on BOTTOM (inverting)
    // 255 is fully off, 0 is fully on
    TCCR0A |= (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0);
  bc:	84 b5       	in	r24, 0x24	; 36
  be:	80 6f       	ori	r24, 0xF0	; 240
  c0:	84 bd       	out	0x24, r24	; 36
    TCCR2A |= (1 << COM2B1) | (1 << COM2B0);
  c2:	80 81       	ld	r24, Z
  c4:	80 63       	ori	r24, 0x30	; 48
  c6:	80 83       	st	Z, r24
    
    // Use clock directly, no prescaler
    TCCR0B |= (0 << CS02) | (0 << CS01) | (1 << CS00);
  c8:	85 b5       	in	r24, 0x25	; 37
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	85 bd       	out	0x25, r24	; 37
    TCCR2B |= (0 << CS22) | (0 << CS21) | (1 << CS20);
  ce:	e1 eb       	ldi	r30, 0xB1	; 177
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	80 83       	st	Z, r24
    
    // initialize counter for TIMER 0 and TIMER 2
    TCNT0 = 0;
  d8:	16 bc       	out	0x26, r1	; 38
    TCNT2 = 0;
  da:	10 92 b2 00 	sts	0x00B2, r1
    
    //Set LED pins as output
    DDRD |= ((1 << PD3) | (1 << PD5) | (1 << PD6));
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	88 66       	ori	r24, 0x68	; 104
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	08 95       	ret

000000e6 <__vector_4>:
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	1b b8       	out	0x0b, r1	; 11
  f8:	2f e3       	ldi	r18, 0x3F	; 63
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <__vector_4+0x18>
 106:	00 c0       	rjmp	.+0      	; 0x108 <__vector_4+0x22>
 108:	00 00       	nop
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <main>:
}

int main(void) {
    //Initialize IO
	initIO();
 11a:	0e 94 4a 00 	call	0x94	; 0x94 <initIO>
    
    //Enable Global Interrupts
    sei();
 11e:	78 94       	sei
void blue(int intensity){
    OCR0B = (255-intensity);
}

void red(int intensity){
    OCR2B = (255-intensity);
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	80 93 b4 00 	sts	0x00B4, r24

#define button PC5
#define button_interrupt PCINT13

void green(int intensity){
    OCR0A = (255-intensity);
 126:	87 bd       	out	0x27, r24	; 39
}

void blue(int intensity){
    OCR0B = (255-intensity);
 128:	88 bd       	out	0x28, r24	; 40
    green(0);
    blue(0);

    //Cycle through colors
	while (1) {
        for(int i = 0; i < 255; i++){
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	8f 3f       	cpi	r24, 0xFF	; 255
 130:	91 05       	cpc	r25, r1
 132:	6c f4       	brge	.+26     	; 0x14e <main+0x34>
void blue(int intensity){
    OCR0B = (255-intensity);
}

void red(int intensity){
    OCR2B = (255-intensity);
 134:	28 2f       	mov	r18, r24
 136:	80 93 b4 00 	sts	0x00B4, r24

#define button PC5
#define button_interrupt PCINT13

void green(int intensity){
    OCR0A = (255-intensity);
 13a:	20 95       	com	r18
 13c:	27 bd       	out	0x27, r18	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	e9 ef       	ldi	r30, 0xF9	; 249
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0x28>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x2e>
 148:	00 00       	nop
    green(0);
    blue(0);

    //Cycle through colors
	while (1) {
        for(int i = 0; i < 255; i++){
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	f0 cf       	rjmp	.-32     	; 0x12e <main+0x14>
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	28 2f       	mov	r18, r24
 154:	20 95       	com	r18

#define button PC5
#define button_interrupt PCINT13

void green(int intensity){
    OCR0A = (255-intensity);
 156:	27 bd       	out	0x27, r18	; 39
}

void blue(int intensity){
    OCR0B = (255-intensity);
 158:	88 bd       	out	0x28, r24	; 40
 15a:	e9 ef       	ldi	r30, 0xF9	; 249
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x44>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x4a>
 164:	00 00       	nop
        for(int i = 0; i < 255; i++){
            red(255-i);
            green(i);
            _delay_ms(1);
        }
        for(int k = 255; k >= 0; k--){
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	a0 f7       	brcc	.-24     	; 0x152 <main+0x38>
 16a:	8f ef       	ldi	r24, 0xFF	; 255
void blue(int intensity){
    OCR0B = (255-intensity);
}

void red(int intensity){
    OCR2B = (255-intensity);
 16c:	80 93 b4 00 	sts	0x00B4, r24
void green(int intensity){
    OCR0A = (255-intensity);
}

void blue(int intensity){
    OCR0B = (255-intensity);
 170:	98 2f       	mov	r25, r24
 172:	90 95       	com	r25
 174:	98 bd       	out	0x28, r25	; 40
 176:	e9 ef       	ldi	r30, 0xF9	; 249
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0x60>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x66>
 180:	00 00       	nop
 182:	81 50       	subi	r24, 0x01	; 1
        for(int k = 255; k >= 0; k--){
            green(k);
            blue(255-k);
            _delay_ms(1);
        }
        for(int j = 0; j < 255; j++){
 184:	99 f7       	brne	.-26     	; 0x16c <main+0x52>
 186:	d1 cf       	rjmp	.-94     	; 0x12a <main+0x10>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
