
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000066  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000066  000000da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  000000da  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  000000f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000020b  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e7  00000000  00000000  0000033b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000125  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011c  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	18 c0       	rjmp	.+48     	; 0x62 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:


int main(void) {
    
    //Set all of Port D to output
    DDRA = 0xFF;
  34:	8f ef       	ldi	r24, 0xFF	; 255
  36:	8a bb       	out	0x1a, r24	; 26
    
    
    while(1){
        PORTA |= _BV(PA0);
  38:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  3a:	2f e3       	ldi	r18, 0x3F	; 63
  3c:	8d e0       	ldi	r24, 0x0D	; 13
  3e:	93 e0       	ldi	r25, 0x03	; 3
  40:	21 50       	subi	r18, 0x01	; 1
  42:	80 40       	sbci	r24, 0x00	; 0
  44:	90 40       	sbci	r25, 0x00	; 0
  46:	e1 f7       	brne	.-8      	; 0x40 <__SREG__+0x1>
  48:	00 c0       	rjmp	.+0      	; 0x4a <__SREG__+0xb>
  4a:	00 00       	nop
        
        _delay_ms(1000);
        
        PORTA &= ~_BV(PA0);
  4c:	d8 98       	cbi	0x1b, 0	; 27
  4e:	2f e3       	ldi	r18, 0x3F	; 63
  50:	8d e0       	ldi	r24, 0x0D	; 13
  52:	93 e0       	ldi	r25, 0x03	; 3
  54:	21 50       	subi	r18, 0x01	; 1
  56:	80 40       	sbci	r24, 0x00	; 0
  58:	90 40       	sbci	r25, 0x00	; 0
  5a:	e1 f7       	brne	.-8      	; 0x54 <__SREG__+0x15>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <__SREG__+0x1f>
  5e:	00 00       	nop
  60:	eb cf       	rjmp	.-42     	; 0x38 <main+0x4>

00000062 <_exit>:
  62:	f8 94       	cli

00000064 <__stop_program>:
  64:	ff cf       	rjmp	.-2      	; 0x64 <__stop_program>
