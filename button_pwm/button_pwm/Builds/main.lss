
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000148  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000798  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e11  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001765  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001778  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000be  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000014  00000000  00000000  00001856  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000058  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  78:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <green>:
#ifndef button_pwm_Functions_h
#define button_pwm_Functions_h


void green(int intensity){
    OCR0A = (255-intensity);
  80:	80 95       	com	r24
  82:	87 bd       	out	0x27, r24	; 39
  84:	08 95       	ret

00000086 <blue>:
}

void blue(int intensity){
    OCR0B = (255-intensity);
  86:	80 95       	com	r24
  88:	88 bd       	out	0x28, r24	; 40
  8a:	08 95       	ret

0000008c <red>:
}

void red(int intensity){
    OCR2B = (255-intensity);
  8c:	80 95       	com	r24
  8e:	80 93 b4 00 	sts	0x00B4, r24
  92:	08 95       	ret

00000094 <alloff>:
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	80 93 b4 00 	sts	0x00B4, r24
#ifndef button_pwm_Functions_h
#define button_pwm_Functions_h


void green(int intensity){
    OCR0A = (255-intensity);
  9a:	87 bd       	out	0x27, r24	; 39
}

void blue(int intensity){
    OCR0B = (255-intensity);
  9c:	88 bd       	out	0x28, r24	; 40
  9e:	08 95       	ret

000000a0 <initIO>:
#include <util/delay.h>
#include <Functions.h>

void initIO(void) {
    //Make PD5 an output
    DDRD |= (1 << PD5);
  a0:	55 9a       	sbi	0x0a, 5	; 10
    
    //Make PC3 an input
    DDRC &= ~(1 << PC3);
  a2:	3b 98       	cbi	0x07, 3	; 7
    
    //Enable pullup resistor on PC3
    PORTC |= (1 << PC3);
  a4:	43 9a       	sbi	0x08, 3	; 8
    
    // Fast PWM mode for timers 0 and 2
    TCCR0A |= (1 << WGM01) | (1 << WGM00);
  a6:	84 b5       	in	r24, 0x24	; 36
  a8:	83 60       	ori	r24, 0x03	; 3
  aa:	84 bd       	out	0x24, r24	; 36
    TCCR2A |= (1 << WGM21) | (1 << WGM20);
  ac:	e0 eb       	ldi	r30, 0xB0	; 176
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	83 60       	ori	r24, 0x03	; 3
  b4:	80 83       	st	Z, r24
    
    // clear OC0A on compare match, set on BOTTOM (inverting)
    // 255 is fully off, 0 is fully on
    TCCR0A |= (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0);
  b6:	84 b5       	in	r24, 0x24	; 36
  b8:	80 6f       	ori	r24, 0xF0	; 240
  ba:	84 bd       	out	0x24, r24	; 36
    TCCR2A |= (1 << COM2B1) | (1 << COM2B0);
  bc:	80 81       	ld	r24, Z
  be:	80 63       	ori	r24, 0x30	; 48
  c0:	80 83       	st	Z, r24
    
    // Use clock directly, no prescaler
    TCCR0B |= (0 << CS02) | (0 << CS01) | (1 << CS00);
  c2:	85 b5       	in	r24, 0x25	; 37
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	85 bd       	out	0x25, r24	; 37
    TCCR2B |= (0 << CS22) | (0 << CS21) | (1 << CS20);
  c8:	e1 eb       	ldi	r30, 0xB1	; 177
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	80 83       	st	Z, r24
    
    // initialize counter for TIMER 0 and TIMER 2
    TCNT0 = 0;
  d2:	16 bc       	out	0x26, r1	; 38
    TCNT2 = 0;
  d4:	10 92 b2 00 	sts	0x00B2, r1
    
    DDRD |= ((1 << PD3) | (1 << PD5) | (1 << PD6));
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	88 66       	ori	r24, 0x68	; 104
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	08 95       	ret

000000e0 <main>:



int main(void)
{
    initIO();
  e0:	0e 94 50 00 	call	0xa0	; 0xa0 <initIO>
    
    alloff();
  e4:	0e 94 4a 00 	call	0x94	; 0x94 <alloff>
    
    while(1){
        if((PINC & _BV(PC5)) == 0){
  e8:	35 99       	sbic	0x06, 5	; 6
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <main+0x4>
  ec:	80 e0       	ldi	r24, 0x00	; 0
}

void red(int intensity){
    OCR2B = (255-intensity);
  ee:	80 93 b4 00 	sts	0x00B4, r24
#ifndef button_pwm_Functions_h
#define button_pwm_Functions_h


void green(int intensity){
    OCR0A = (255-intensity);
  f2:	98 2f       	mov	r25, r24
  f4:	90 95       	com	r25
  f6:	97 bd       	out	0x27, r25	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	e7 ee       	ldi	r30, 0xE7	; 231
  fa:	f3 e0       	ldi	r31, 0x03	; 3
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x1c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x22>
 102:	00 00       	nop
 104:	8f 5f       	subi	r24, 0xFF	; 255
            for(int i = 0; i < 255; i++){
 106:	8f 3f       	cpi	r24, 0xFF	; 255
 108:	91 f7       	brne	.-28     	; 0xee <main+0xe>
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	28 2f       	mov	r18, r24
 110:	20 95       	com	r18
 112:	27 bd       	out	0x27, r18	; 39
}

void blue(int intensity){
    OCR0B = (255-intensity);
 114:	88 bd       	out	0x28, r24	; 40
 116:	e7 ee       	ldi	r30, 0xE7	; 231
 118:	f3 e0       	ldi	r31, 0x03	; 3
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x3a>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x40>
 120:	00 00       	nop
                red(255-i);
                green(i);
                _delay_ms(0.25);
            }
            for(int k = 255; k >= 0; k--){
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	a0 f7       	brcc	.-24     	; 0x10e <main+0x2e>
 126:	8f ef       	ldi	r24, 0xFF	; 255
}

void red(int intensity){
    OCR2B = (255-intensity);
 128:	80 93 b4 00 	sts	0x00B4, r24
void green(int intensity){
    OCR0A = (255-intensity);
}

void blue(int intensity){
    OCR0B = (255-intensity);
 12c:	98 2f       	mov	r25, r24
 12e:	90 95       	com	r25
 130:	98 bd       	out	0x28, r25	; 40
 132:	e7 ee       	ldi	r30, 0xE7	; 231
 134:	f3 e0       	ldi	r31, 0x03	; 3
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0x56>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x5c>
 13c:	00 00       	nop
 13e:	81 50       	subi	r24, 0x01	; 1
                green(k);
                blue(255-k);
                _delay_ms(0.25);
            }
            for(int j = 0; j < 255; j++){
 140:	99 f7       	brne	.-26     	; 0x128 <main+0x48>
 142:	d0 cf       	rjmp	.-96     	; 0xe4 <main+0x4>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
