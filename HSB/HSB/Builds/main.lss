
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000152  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000774  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000def  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000172b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001740  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000be  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000014  00000000  00000000  0000181e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000058  00000000  00000000  00001832  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 67 00 	call	0xce	; 0xce <main>
  78:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <green>:
#include <avr/interrupt.h>
#include <util/delay.h>


void green(int intensity){
    OCR0A = (255-intensity);
  80:	80 95       	com	r24
  82:	87 bd       	out	0x27, r24	; 39
  84:	08 95       	ret

00000086 <blue>:
}

void blue(int intensity){
    OCR0B = (255-intensity);
  86:	80 95       	com	r24
  88:	88 bd       	out	0x28, r24	; 40
  8a:	08 95       	ret

0000008c <red>:
}

void red(int intensity){
    OCR2B = (255-intensity);
  8c:	80 95       	com	r24
  8e:	80 93 b4 00 	sts	0x00B4, r24
  92:	08 95       	ret

00000094 <initIO>:
}


void initIO(void) {
    // Fast PWM mode for timers 0 and 2
    TCCR0A |= (1 << WGM01) | (1 << WGM00);
  94:	84 b5       	in	r24, 0x24	; 36
  96:	83 60       	ori	r24, 0x03	; 3
  98:	84 bd       	out	0x24, r24	; 36
    TCCR2A |= (1 << WGM21) | (1 << WGM20);
  9a:	e0 eb       	ldi	r30, 0xB0	; 176
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	83 60       	ori	r24, 0x03	; 3
  a2:	80 83       	st	Z, r24
    
    // clear OC0A on compare match, set on BOTTOM (inverting)
    // 255 is fully off, 0 is fully on
    TCCR0A |= (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0);
  a4:	84 b5       	in	r24, 0x24	; 36
  a6:	80 6f       	ori	r24, 0xF0	; 240
  a8:	84 bd       	out	0x24, r24	; 36
    TCCR2A |= (1 << COM2B1) | (1 << COM2B0);
  aa:	80 81       	ld	r24, Z
  ac:	80 63       	ori	r24, 0x30	; 48
  ae:	80 83       	st	Z, r24
    
    // Use clock directly, no prescaler
    TCCR0B |= (0 << CS02) | (0 << CS01) | (1 << CS00);
  b0:	85 b5       	in	r24, 0x25	; 37
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	85 bd       	out	0x25, r24	; 37
    TCCR2B |= (0 << CS22) | (0 << CS21) | (1 << CS20);
  b6:	e1 eb       	ldi	r30, 0xB1	; 177
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24
    
    // initialize counter for TIMER 0 and TIMER 2
    TCNT0 = 0;
  c0:	16 bc       	out	0x26, r1	; 38
    TCNT2 = 0;
  c2:	10 92 b2 00 	sts	0x00B2, r1
    
    DDRD |= ((1 << PD3) | (1 << PD5) | (1 << PD6));
  c6:	8a b1       	in	r24, 0x0a	; 10
  c8:	88 66       	ori	r24, 0x68	; 104
  ca:	8a b9       	out	0x0a, r24	; 10
  cc:	08 95       	ret

000000ce <main>:
}

int main(void) {
	initIO();
  ce:	0e 94 4a 00 	call	0x94	; 0x94 <initIO>
    sei();
  d2:	78 94       	sei
void blue(int intensity){
    OCR0B = (255-intensity);
}

void red(int intensity){
    OCR2B = (255-intensity);
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	80 93 b4 00 	sts	0x00B4, r24
#include <avr/interrupt.h>
#include <util/delay.h>


void green(int intensity){
    OCR0A = (255-intensity);
  da:	87 bd       	out	0x27, r24	; 39
}

void blue(int intensity){
    OCR0B = (255-intensity);
  dc:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	8b e7       	ldi	r24, 0x7B	; 123
  e2:	92 e9       	ldi	r25, 0x92	; 146
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x20>
  ee:	00 00       	nop
    red(0);
    green(0);
    blue(0);
    _delay_ms(3000);
	while (1) {
        for(int i = 0; i < 255; i++){
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	8f 3f       	cpi	r24, 0xFF	; 255
  f6:	91 05       	cpc	r25, r1
  f8:	6c f4       	brge	.+26     	; 0x114 <main+0x46>
void blue(int intensity){
    OCR0B = (255-intensity);
}

void red(int intensity){
    OCR2B = (255-intensity);
  fa:	28 2f       	mov	r18, r24
  fc:	80 93 b4 00 	sts	0x00B4, r24
#include <avr/interrupt.h>
#include <util/delay.h>


void green(int intensity){
    OCR0A = (255-intensity);
 100:	20 95       	com	r18
 102:	27 bd       	out	0x27, r18	; 39
 104:	ef ec       	ldi	r30, 0xCF	; 207
 106:	f7 e0       	ldi	r31, 0x07	; 7
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x3a>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x40>
 10e:	00 00       	nop
    red(0);
    green(0);
    blue(0);
    _delay_ms(3000);
	while (1) {
        for(int i = 0; i < 255; i++){
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	f0 cf       	rjmp	.-32     	; 0xf4 <main+0x26>
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	28 2f       	mov	r18, r24
 11a:	20 95       	com	r18
#include <avr/interrupt.h>
#include <util/delay.h>


void green(int intensity){
    OCR0A = (255-intensity);
 11c:	27 bd       	out	0x27, r18	; 39
}

void blue(int intensity){
    OCR0B = (255-intensity);
 11e:	88 bd       	out	0x28, r24	; 40
 120:	ef ec       	ldi	r30, 0xCF	; 207
 122:	f7 e0       	ldi	r31, 0x07	; 7
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x56>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x5c>
 12a:	00 00       	nop
        for(int i = 0; i < 255; i++){
            red(255-i);
            green(i);
            _delay_ms(0.5);
        }
        for(int k = 255; k >= 0; k--){
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	a0 f7       	brcc	.-24     	; 0x118 <main+0x4a>
 130:	8f ef       	ldi	r24, 0xFF	; 255
void blue(int intensity){
    OCR0B = (255-intensity);
}

void red(int intensity){
    OCR2B = (255-intensity);
 132:	80 93 b4 00 	sts	0x00B4, r24
void green(int intensity){
    OCR0A = (255-intensity);
}

void blue(int intensity){
    OCR0B = (255-intensity);
 136:	98 2f       	mov	r25, r24
 138:	90 95       	com	r25
 13a:	98 bd       	out	0x28, r25	; 40
 13c:	ef ec       	ldi	r30, 0xCF	; 207
 13e:	f7 e0       	ldi	r31, 0x07	; 7
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x72>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x78>
 146:	00 00       	nop
 148:	81 50       	subi	r24, 0x01	; 1
        for(int k = 255; k >= 0; k--){
            green(k);
            blue(255-k);
            _delay_ms(0.5);
        }
        for(int j = 0; j < 255; j++){
 14a:	99 f7       	brne	.-26     	; 0x132 <main+0x64>
 14c:	d1 cf       	rjmp	.-94     	; 0xf0 <main+0x22>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
