   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 110               	.global	green
 112               	green:
   1:/Users/sethpenna/Desktop/HSB/HSB/main.c **** #include <stdio.h>
   2:/Users/sethpenna/Desktop/HSB/HSB/main.c **** #include <avr/io.h>
   3:/Users/sethpenna/Desktop/HSB/HSB/main.c **** #include <avr/interrupt.h>
   4:/Users/sethpenna/Desktop/HSB/HSB/main.c **** #include <util/delay.h>
   5:/Users/sethpenna/Desktop/HSB/HSB/main.c **** 
   6:/Users/sethpenna/Desktop/HSB/HSB/main.c **** 
   7:/Users/sethpenna/Desktop/HSB/HSB/main.c **** void green(int intensity){
 114               	.LM0:
 115               	.LFBB1:
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 0 */
 119               	.L__stack_usage = 0
   8:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     OCR0A = (255-intensity);
 121               	.LM1:
 122 0000 8095      		com r24
 123 0002 87BD      		out 0x27,r24
 124 0004 0895      		ret
 126               	.Lscope1:
 128               	.global	blue
 130               	blue:
   9:/Users/sethpenna/Desktop/HSB/HSB/main.c **** }
  10:/Users/sethpenna/Desktop/HSB/HSB/main.c **** 
  11:/Users/sethpenna/Desktop/HSB/HSB/main.c **** void blue(int intensity){
 132               	.LM2:
 133               	.LFBB2:
 134               	/* prologue: function */
 135               	/* frame size = 0 */
 136               	/* stack size = 0 */
 137               	.L__stack_usage = 0
  12:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     OCR0B = (255-intensity);
 139               	.LM3:
 140 0006 8095      		com r24
 141 0008 88BD      		out 0x28,r24
 142 000a 0895      		ret
 144               	.Lscope2:
 146               	.global	red
 148               	red:
  13:/Users/sethpenna/Desktop/HSB/HSB/main.c **** }
  14:/Users/sethpenna/Desktop/HSB/HSB/main.c **** 
  15:/Users/sethpenna/Desktop/HSB/HSB/main.c **** void red(int intensity){
 150               	.LM4:
 151               	.LFBB3:
 152               	/* prologue: function */
 153               	/* frame size = 0 */
 154               	/* stack size = 0 */
 155               	.L__stack_usage = 0
  16:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     OCR2B = (255-intensity);
 157               	.LM5:
 158 000c 8095      		com r24
 159 000e 8093 B400 		sts 180,r24
 160 0012 0895      		ret
 162               	.Lscope3:
 164               	.global	initIO
 166               	initIO:
  17:/Users/sethpenna/Desktop/HSB/HSB/main.c **** }
  18:/Users/sethpenna/Desktop/HSB/HSB/main.c **** 
  19:/Users/sethpenna/Desktop/HSB/HSB/main.c **** 
  20:/Users/sethpenna/Desktop/HSB/HSB/main.c **** void initIO(void) {
 168               	.LM6:
 169               	.LFBB4:
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 0 */
 173               	.L__stack_usage = 0
  21:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     // Fast PWM mode for timers 0 and 2
  22:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     TCCR0A |= (1 << WGM01) | (1 << WGM00);
 175               	.LM7:
 176 0014 84B5      		in r24,0x24
 177 0016 8360      		ori r24,lo8(3)
 178 0018 84BD      		out 0x24,r24
  23:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     TCCR2A |= (1 << WGM21) | (1 << WGM20);
 180               	.LM8:
 181 001a E0EB      		ldi r30,lo8(-80)
 182 001c F0E0      		ldi r31,0
 183 001e 8081      		ld r24,Z
 184 0020 8360      		ori r24,lo8(3)
 185 0022 8083      		st Z,r24
  24:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     
  25:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     // clear OC0A on compare match, set on BOTTOM (inverting)
  26:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     // 255 is fully off, 0 is fully on
  27:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     TCCR0A |= (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0);
 187               	.LM9:
 188 0024 84B5      		in r24,0x24
 189 0026 806F      		ori r24,lo8(-16)
 190 0028 84BD      		out 0x24,r24
  28:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     TCCR2A |= (1 << COM2B1) | (1 << COM2B0);
 192               	.LM10:
 193 002a 8081      		ld r24,Z
 194 002c 8063      		ori r24,lo8(48)
 195 002e 8083      		st Z,r24
  29:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     
  30:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     // Use clock directly, no prescaler
  31:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     TCCR0B |= (0 << CS02) | (0 << CS01) | (1 << CS00);
 197               	.LM11:
 198 0030 85B5      		in r24,0x25
 199 0032 8160      		ori r24,lo8(1)
 200 0034 85BD      		out 0x25,r24
  32:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     TCCR2B |= (0 << CS22) | (0 << CS21) | (1 << CS20);
 202               	.LM12:
 203 0036 E1EB      		ldi r30,lo8(-79)
 204 0038 F0E0      		ldi r31,0
 205 003a 8081      		ld r24,Z
 206 003c 8160      		ori r24,lo8(1)
 207 003e 8083      		st Z,r24
  33:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     
  34:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     // initialize counter for TIMER 0 and TIMER 2
  35:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     TCNT0 = 0;
 209               	.LM13:
 210 0040 16BC      		out 0x26,__zero_reg__
  36:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     TCNT2 = 0;
 212               	.LM14:
 213 0042 1092 B200 		sts 178,__zero_reg__
  37:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     
  38:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     DDRD |= ((1 << PD3) | (1 << PD5) | (1 << PD6));
 215               	.LM15:
 216 0046 8AB1      		in r24,0xa
 217 0048 8866      		ori r24,lo8(104)
 218 004a 8AB9      		out 0xa,r24
 219 004c 0895      		ret
 221               	.Lscope4:
 222               		.section	.text.startup,"ax",@progbits
 224               	.global	main
 226               	main:
  39:/Users/sethpenna/Desktop/HSB/HSB/main.c **** }
  40:/Users/sethpenna/Desktop/HSB/HSB/main.c **** 
  41:/Users/sethpenna/Desktop/HSB/HSB/main.c **** int main(void) {
 228               	.LM16:
 229               	.LFBB5:
 230               	/* prologue: function */
 231               	/* frame size = 0 */
 232               	/* stack size = 0 */
 233               	.L__stack_usage = 0
  42:/Users/sethpenna/Desktop/HSB/HSB/main.c **** 	initIO();
 235               	.LM17:
 236 0000 0E94 0000 		call initIO
  43:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     sei();
 238               	.LM18:
 239               	/* #APP */
 240               	 ;  43 "/Users/sethpenna/Desktop/HSB/HSB/main.c" 1
 241 0004 7894      		sei
 242               	 ;  0 "" 2
 243               	/* #NOAPP */
 244               	.LBB31:
 245               	.LBB32:
  16:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     OCR2B = (255-intensity);
 247               	.LM19:
 248 0006 8FEF      		ldi r24,lo8(-1)
 249 0008 8093 B400 		sts 180,r24
 250               	.LBE32:
 251               	.LBE31:
 252               	.LBB33:
 253               	.LBB34:
   8:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     OCR0A = (255-intensity);
 255               	.LM20:
 256 000c 87BD      		out 0x27,r24
 257               	.LBE34:
 258               	.LBE33:
 259               	.LBB35:
 260               	.LBB36:
  12:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     OCR0B = (255-intensity);
 262               	.LM21:
 263 000e 88BD      		out 0x28,r24
 264               	.LBE36:
 265               	.LBE35:
 266               	.LBB37:
 267               	.LBB38:
 269               	.Ltext1:
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 271               	.LM22:
 272 0010 2FEF      		ldi r18,lo8(9599999)
 273 0012 8BE7      		ldi r24,hi8(9599999)
 274 0014 92E9      		ldi r25,hlo8(9599999)
 275 0016 2150      		1: subi r18,1
 276 0018 8040      		sbci r24,0
 277 001a 9040      		sbci r25,0
 278 001c 01F4      		brne 1b
 279 001e 00C0      		rjmp .
 280 0020 0000      		nop
 281               	.L12:
 282               	.LBE38:
 283               	.LBE37:
 284               	.LBB39:
 286               	.Ltext2:
  44:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     
  45:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     red(0);
  46:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     green(0);
  47:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     blue(0);
  48:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     _delay_ms(3000);
  49:/Users/sethpenna/Desktop/HSB/HSB/main.c **** 	while (1) {
  50:/Users/sethpenna/Desktop/HSB/HSB/main.c ****         for(int i = 0; i < 255; i++){
 288               	.LM23:
 289 0022 80E0      		ldi r24,0
 290 0024 90E0      		ldi r25,0
 291               	.L6:
 293               	.LM24:
 294 0026 8F3F      		cpi r24,-1
 295 0028 9105      		cpc r25,__zero_reg__
 296 002a 04F4      		brge .L14
 297               	.LBB40:
 298               	.LBB41:
  16:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     OCR2B = (255-intensity);
 300               	.LM25:
 301 002c 282F      		mov r18,r24
 302 002e 8093 B400 		sts 180,r24
 303               	.LBE41:
 304               	.LBE40:
 305               	.LBB42:
 306               	.LBB43:
   8:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     OCR0A = (255-intensity);
 308               	.LM26:
 309 0032 2095      		com r18
 310 0034 27BD      		out 0x27,r18
 311               	.LBE43:
 312               	.LBE42:
 313               	.LBB44:
 314               	.LBB45:
 316               	.Ltext3:
 318               	.LM27:
 319 0036 EFEC      		ldi r30,lo8(1999)
 320 0038 F7E0      		ldi r31,hi8(1999)
 321 003a 3197      		1: sbiw r30,1
 322 003c 01F4      		brne 1b
 323 003e 00C0      		rjmp .
 324 0040 0000      		nop
 325               	.LBE45:
 326               	.LBE44:
 328               	.Ltext4:
 330               	.LM28:
 331 0042 0196      		adiw r24,1
 332 0044 00C0      		rjmp .L6
 333               	.L14:
 335               	.LM29:
 336 0046 8FEF      		ldi r24,lo8(-1)
 337 0048 90E0      		ldi r25,0
 338               	.L9:
 339 004a 282F      		mov r18,r24
 340 004c 2095      		com r18
 341               	.LBE39:
 342               	.LBB46:
 343               	.LBB47:
 344               	.LBB48:
   8:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     OCR0A = (255-intensity);
 346               	.LM30:
 347 004e 27BD      		out 0x27,r18
 348               	.LBE48:
 349               	.LBE47:
 350               	.LBB49:
 351               	.LBB50:
  12:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     OCR0B = (255-intensity);
 353               	.LM31:
 354 0050 88BD      		out 0x28,r24
 355               	.LBE50:
 356               	.LBE49:
 357               	.LBB51:
 358               	.LBB52:
 360               	.Ltext5:
 362               	.LM32:
 363 0052 EFEC      		ldi r30,lo8(1999)
 364 0054 F7E0      		ldi r31,hi8(1999)
 365 0056 3197      		1: sbiw r30,1
 366 0058 01F4      		brne 1b
 367 005a 00C0      		rjmp .
 368 005c 0000      		nop
 369               	.LBE52:
 370               	.LBE51:
 372               	.Ltext6:
  51:/Users/sethpenna/Desktop/HSB/HSB/main.c ****             red(255-i);
  52:/Users/sethpenna/Desktop/HSB/HSB/main.c ****             green(i);
  53:/Users/sethpenna/Desktop/HSB/HSB/main.c ****             _delay_ms(0.5);
  54:/Users/sethpenna/Desktop/HSB/HSB/main.c ****         }
  55:/Users/sethpenna/Desktop/HSB/HSB/main.c ****         for(int k = 255; k >= 0; k--){
 374               	.LM33:
 375 005e 0197      		sbiw r24,1
 376 0060 00F4      		brcc .L9
 377 0062 8FEF      		ldi r24,lo8(-1)
 378               	.L11:
 379               	.LBE46:
 380               	.LBB53:
 381               	.LBB54:
 382               	.LBB55:
  16:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     OCR2B = (255-intensity);
 384               	.LM34:
 385 0064 8093 B400 		sts 180,r24
 386               	.LBE55:
 387               	.LBE54:
 388               	.LBB56:
 389               	.LBB57:
  12:/Users/sethpenna/Desktop/HSB/HSB/main.c ****     OCR0B = (255-intensity);
 391               	.LM35:
 392 0068 982F      		mov r25,r24
 393 006a 9095      		com r25
 394 006c 98BD      		out 0x28,r25
 395               	.LBE57:
 396               	.LBE56:
 397               	.LBB58:
 398               	.LBB59:
 400               	.Ltext7:
 402               	.LM36:
 403 006e EFEC      		ldi r30,lo8(1999)
 404 0070 F7E0      		ldi r31,hi8(1999)
 405 0072 3197      		1: sbiw r30,1
 406 0074 01F4      		brne 1b
 407 0076 00C0      		rjmp .
 408 0078 0000      		nop
 409 007a 8150      		subi r24,lo8(-(-1))
 410               	.LBE59:
 411               	.LBE58:
 413               	.Ltext8:
  56:/Users/sethpenna/Desktop/HSB/HSB/main.c ****             green(k);
  57:/Users/sethpenna/Desktop/HSB/HSB/main.c ****             blue(255-k);
  58:/Users/sethpenna/Desktop/HSB/HSB/main.c ****             _delay_ms(0.5);
  59:/Users/sethpenna/Desktop/HSB/HSB/main.c ****         }
  60:/Users/sethpenna/Desktop/HSB/HSB/main.c ****         for(int j = 0; j < 255; j++){
 415               	.LM37:
 416 007c 01F4      		brne .L11
 417 007e 00C0      		rjmp .L12
 418               	.LBE53:
 426               	.Lscope5:
 427               		.text
 429               	.Letext0:
 430               		.ident	"GCC: (GNU) 4.8.1"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/7r/172l2v6s1790wxggh2qc74fc0000gn/T//ccNyw26T.s:2      *ABS*:0000003e __SP_H__
/var/folders/7r/172l2v6s1790wxggh2qc74fc0000gn/T//ccNyw26T.s:3      *ABS*:0000003d __SP_L__
/var/folders/7r/172l2v6s1790wxggh2qc74fc0000gn/T//ccNyw26T.s:4      *ABS*:0000003f __SREG__
/var/folders/7r/172l2v6s1790wxggh2qc74fc0000gn/T//ccNyw26T.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/7r/172l2v6s1790wxggh2qc74fc0000gn/T//ccNyw26T.s:6      *ABS*:00000001 __zero_reg__
/var/folders/7r/172l2v6s1790wxggh2qc74fc0000gn/T//ccNyw26T.s:112    .text:00000000 green
/var/folders/7r/172l2v6s1790wxggh2qc74fc0000gn/T//ccNyw26T.s:130    .text:00000006 blue
/var/folders/7r/172l2v6s1790wxggh2qc74fc0000gn/T//ccNyw26T.s:148    .text:0000000c red
/var/folders/7r/172l2v6s1790wxggh2qc74fc0000gn/T//ccNyw26T.s:166    .text:00000014 initIO
/var/folders/7r/172l2v6s1790wxggh2qc74fc0000gn/T//ccNyw26T.s:226    .text.startup:00000000 main

NO UNDEFINED SYMBOLS
